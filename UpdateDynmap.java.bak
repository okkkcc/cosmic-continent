package games.alejandrocoria.mapfrontiers.common;


import net.minecraft.core.BlockPos;
// import mtr.data.AreaBase;
// import mtr.data.IGui;
// import mtr.data.RailwayData;
import net.minecraft.server.MinecraftServer;
import net.minecraft.world.level.Level;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.dynmap.DynmapCommonAPI;
import org.dynmap.DynmapCommonAPIListener;
// import org.dynmap.markers.AreaMarker;
import org.dynmap.markers.AreaMarker;
import org.dynmap.markers.MarkerSet;

import java.util.UUID;

// import java.util.Collections;
// import java.util.HashSet;
// import java.util.Set;

public class UpdateDynmap {

    // String MARKER_SET_STATIONS_ID = "mtr_stations";
	// String MARKER_SET_STATION_AREAS_ID = "mtr_station_areas";
	// String MARKER_SET_STATIONS_TITLE = "Stations";
	// String MARKER_SET_STATION_AREAS_TITLE = "Station Areas";
	// String MARKER_SET_DEPOTS_ID = "mtr_depots";
	// String MARKER_SET_DEPOT_AREAS_ID = "mtr_depot_areas";
	// String MARKER_SET_DEPOTS_TITLE = "Depots";
	// String MARKER_SET_DEPOT_AREAS_TITLE = "Depot Areas";
	// String STATION_ICON_PATH = "/assets/mtr/textures/block/sign/logo.png";
	// String DEPOT_ICON_PATH = "/assets/mtr/textures/block/sign/logo_grayscale.png";
	// String STATION_ICON_KEY = "mtr_station";
	// String DEPOT_ICON_KEY = "mtr_depot";
	// int ICON_SIZE = 24;

	private static DynmapCommonAPI dynmapCommonAPI;
	private static org.dynmap.markers.MarkerAPI markerAPI;
	private static org.dynmap.markers.MarkerSet markerSetAreas;
	private static org.dynmap.markers.MarkerSet markerSetAreasPrivate;

	// private org.dynmap.markers.MarkerSet tempMarkerSetAreas = markerAPI.getMarkerSet("mapfrontiers");

	static {
		try {
			DynmapCommonAPIListener.register(new DynmapCommonAPIListener() {
				@Override
				public void apiEnabled(DynmapCommonAPI dynmapCommonAPI) {
					UpdateDynmap.dynmapCommonAPI = dynmapCommonAPI;
				}
			});
			markerAPI=dynmapCommonAPI.getMarkerAPI();
			markerSetAreas=
				markerAPI.getMarkerSet("frontiers") == null ?
				markerAPI.createMarkerSet("frontiers", "Frontiers", null, false) : markerAPI.getMarkerSet("frontiers");
			markerSetAreasPrivate=
				markerAPI.getMarkerSet("frontiers-private") == null ?
				markerAPI.createMarkerSet("frontiers-private", "Private Frontiers", null, false) : markerAPI.getMarkerSet("frontiers-private");
			markerSetAreasPrivate.setHideByDefault(true);
		} catch (
				Exception e) {
			e.printStackTrace();
		}
	}

	public static void updateDynmapList(HashMap<UUID,FrontierData> data){
		markerSetAreas.getAreaMarkers().forEach(marker -> {
			marker.deleteMarker();
		});
		data.forEach((k,v)->{
			updateDynmap(v);
		});
	}

	public static void updateDynmap(FrontierData data){
		// System.out.println(data.getId().toString());
		// System.out.println(data.getDimension().location().getPath());
		// System.out.println(data.getVertices());
		// UpdateDynmap updateDynmap = new UpdateDynmap();
		
		String worldId=data.getDimension().location().getPath();
		// Color color=null;
		int color=data.getColor();
		// System.out.println("ColorInt: "+Integer.toString(color));
		List<Integer> xList=new ArrayList<Integer>();
		List<Integer> zList=new ArrayList<Integer>();
		List<BlockPos> vertices = data.getVertices();
		Iterator<BlockPos> it=vertices.iterator();
		while(it.hasNext()){
			BlockPos e=it.next();
			xList.add(e.getX());
			zList.add(e.getZ());
		}
		double[] xArray=new double[xList.size()];
		double[] zArray=new double[zList.size()];
		for(int i=0;i<xList.size();i++){
			xArray[i]=xList.get(i);
			zArray[i]=zList.get(i);
		}
		String label=data.getName1()+(data.getPersonal()?"(@"+data.getOwner().toString()+")":"");
		updateDynmap(data.getId().toString(), label, false, worldId.equals("overworld")?"world":worldId, xArray, zArray, color&16777215,data.getPersonal(),false);
	}
	
	public static void deleteDynmap(FrontierData data){
		// final String worldId=data.getDimension().location().getPath().equals("overworld")?"world":data.getDimension().location().getPath();
		// final org.dynmap.markers.MarkerAPI markerAPI = dynmapCommonAPI.getMarkerAPI();
        // final org.dynmap.markers.MarkerSet markerSetAreas;
        // org.dynmap.markers.MarkerSet markerSetAreas = markerAPI.getMarkerSet("mapfrontiers");
        if(markerSetAreas==null)return;

		markerSetAreas.getAreaMarkers().forEach(marker -> {
			if (marker.getMarkerID().equals(data.getId().toString())) {
				marker.deleteMarker();
			}
		});


	}

    private static void updateDynmap(String areaId, String label,boolean markup, String worldId, double[] x,double[] z,int color,boolean isPrivate,boolean persistent){

        // final MinecraftServer minecraftServer = world.getServer();
        worldId = worldId==null?"world":worldId;
		// final String finalWorldId=worldId;
        // markup = markup==null?false:markup;

        // final org.dynmap.markers.MarkerAPI markerAPI = dynmapCommonAPI.getMarkerAPI();
        // final org.dynmap.markers.MarkerSet markerSetAreas;
        // org.dynmap.markers.MarkerSet tempMarkerSetAreas = markerAPI.getMarkerSet("mapfrontiers");
        // markerSetAreas = tempMarkerSetAreas == null ? markerAPI.createMarkerSet("mapfrontiers", "Frontiers", null, false) : tempMarkerSetAreas;
		
        // final org.dynmap.markers.MarkerSet markerSetAreaAreas;
        
        // org.dynmap.markers.MarkerSet tempMarkerSetAreaAreas = markerAPI.getMarkerSet(areaId);

        // markerSetAreas = tempMarkerSetAreas == null ? markerAPI.createMarkerSet("mapfrontiers", "Frontiers", null, false) : tempMarkerSetAreas;

        // org.dynmap.markers.MarkerSet tempMarkerSetAreas = markerAPI.getMarkerSet("mapfrontiers");
        // markerSetAreaAreas = tempMarkerSetAreaAreas == null ? markerSetAreas.createAreaMarker(areaId, label, null, false) : tempMarkerSetAreaAreas;
        
        // org.dynmap.markers.MarkerSet tempMarkerSetAreas = markerAPI.getMarkerSet(areasId);
        // markerSetAreas.createMarker(areaId, label, worldId, areaX, areaY, areaZ, markerAPI.getMarkerIcon(iconKey), false);
		MarkerSet markerSet=isPrivate?markerSetAreasPrivate:markerSetAreas;
		markerSetAreas.getAreaMarkers().forEach(marker -> {
			if (marker.getMarkerID().equals(areaId)) {
				marker.deleteMarker();
			}
		});
		markerSetAreasPrivate.getAreaMarkers().forEach(marker -> {
			if (marker.getMarkerID().equals(areaId)) {
				marker.deleteMarker();
			}
		});
        AreaMarker newArea=markerSet.createAreaMarker(areaId, label, false, worldId, x, z, false);

        // Test Feature
        newArea.setFillStyle(0.01, color);
        newArea.setLineStyle(2, 1, color);
        // newArea.set

    }

}
